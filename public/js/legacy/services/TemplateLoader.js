/**
 * Template Loader Service
 * Handles loading and managing report templates
 */

class TemplateLoader {
    
    /**
     * Load a template by name
     */
    static async loadTemplate(templateName = 'default') {
        try {
            const basePath = `/js/templates/${templateName}`;
            
            // Load template files in parallel
            const [htmlResponse, cssResponse, configResponse] = await Promise.all([
                fetch(`${basePath}/template.html`),
                fetch(`${basePath}/styles.css`),
                fetch(`${basePath}/config.json`)
            ]);
            
            // Check if all files loaded successfully
            if (!htmlResponse.ok) {
                throw new Error(`Failed to load template HTML: ${htmlResponse.status}`);
            }
            if (!cssResponse.ok) {
                throw new Error(`Failed to load template CSS: ${cssResponse.status}`);
            }
            if (!configResponse.ok) {
                throw new Error(`Failed to load template config: ${configResponse.status}`);
            }
            
            // Parse the responses
            const [html, css, config] = await Promise.all([
                htmlResponse.text(),
                cssResponse.text(),
                configResponse.json()
            ]);
            
            return {
                name: templateName,
                html,
                css,
                config
            };
            
        } catch (error) {
            console.error(`Failed to load template '${templateName}':`, error);
            throw new Error(`Template loading failed: ${error.message}`);
        }
    }
    
    /**
     * Get list of available templates
     */
    static async getAvailableTemplates() {
        try {
            // For now, return hardcoded list
            // In the future, this could fetch from an API endpoint
            return [
                {
                    name: 'default',
                    displayName: 'Default Template',
                    description: 'Modern interactive report with expandable details'
                }
            ];
        } catch (error) {
            console.error('Failed to get available templates:', error);
            return [];
        }
    }
    
    /**
     * Process template variables/placeholders
     */
    static processTemplate(template, variables) {
        let processedHtml = template.html;
        
        // Replace all template variables
        for (const [key, value] of Object.entries(variables)) {
            const placeholder = `{{${key}}}`;
            // Replace placeholders using simple string replacement
            processedHtml = processedHtml.replace(new RegExp(placeholder.replace(/[{}]/g, '\\$&'), 'g'), value || '');
        }
        
        return processedHtml;
    }
    
    /**
     * Validate template structure
     */
    static validateTemplate(template) {
        const required = ['html', 'css', 'config'];
        
        for (const field of required) {
            if (!template[field]) {
                throw new Error(`Template missing required field: ${field}`);
            }
        }
        
        // Validate config structure
        if (!template.config.name) {
            throw new Error('Template config missing name field');
        }
        
        return true;
    }
    
    /**
     * Create template variables object from processed data
     */
    static createTemplateVariables(processedData, additionalVars = {}) {
        return {
            firmName: processedData.firm_name || 'Unknown Firm',
            styles: '', // Will be filled by the template's CSS
            summarySection: '', // Will be generated by HTMLReportService
            companyRows: '', // Will be generated by HTMLReportService
            javascript: '', // Will be filled by template's JS
            ...additionalVars
        };
    }
}

export { TemplateLoader };